#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Aug 17 14:01:00 2021

@author: jacobrosenstein
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import minimize


    
with open('../minerva_sensor/data/impedance/image_ph1.npy','rb') as f:
    image_ph1 = np.load(f)

with open('../minerva_sensor/data/impedance/image_ph2.npy','rb') as f:
    image_ph2 = np.load(f)



def apply_cal(image,coeffs):
    assert(len(coeffs)==8)
    image_cal = image.copy()
    for ch in range(8):
        image_cal[:,ch*32:(ch+1)*32] = image_cal[:,ch*32:(ch+1)*32] / coeffs[ch]
    return image_cal

def eval_mismatch(image,verbose=False):
    grad=0
    for ch in range(1,8):
        err = np.abs(np.sum(image[:,ch*32]) - np.sum(image[:,ch*32-1]))
        grad = grad + err
        if verbose:
            print('ch',err)
    return grad

def apply_cal_and_eval_mismatch(image,coeffs):
    image_cal = apply_cal(image,coeffs)
    return eval_mismatch(image_cal)

def auto_cal(image,initialcoeffs=np.ones(8)):
    res = minimize(lambda coeffs: apply_cal_and_eval_mismatch(image,coeffs), 
                   initialcoeffs,
                   method = 'Nelder-Mead',
                   options={'disp': True, 'xatol': 1e-6})
    return apply_cal(image,res.x), res.x


initialcoeffs = np.ones(8)
initialcoeffs[1:] = initialcoeffs[1:] + 0.1*np.random.rand(7)
image_cal_ph1,coeffs1 = auto_cal(image_ph1,initialcoeffs)
image_cal_ph2,coeffs2 = auto_cal(image_ph2,initialcoeffs)



cmap='Blues'
plt.figure(figsize=(12,6))
plt.subplot(1,4,1)
plt.imshow(image_ph1,cmap=cmap)
plt.colorbar(orientation="horizontal")
plt.title('ph1')
plt.subplot(1,4,2)
plt.imshow(image_ph2,cmap=cmap)
plt.colorbar(orientation="horizontal")
plt.title('ph2')
plt.subplot(1,4,3)
plt.imshow(image_cal_ph1,cmap=cmap)
plt.colorbar(orientation="horizontal")
plt.title('ph1 after auto-cal')
plt.subplot(1,4,4)
plt.imshow(image_cal_ph2,cmap=cmap)
plt.colorbar(orientation="horizontal")
plt.title('ph2 after auto-cal')
plt.show()



